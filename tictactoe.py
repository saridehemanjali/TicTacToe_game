# -*- coding: utf-8 -*-
"""TicTacToe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HvvZ0L9SMdzVkKRUryXlh1roSGX0eEqC
"""

import random

class TicTacToe:
    def __init__(self):
        self.board = [[' ' for _ in range(3)] for _ in range(3)]

    def init_board(self):
        self.board = [[' ' for _ in range(3)] for _ in range(3)]

    def disp_board(self):
        print("--------------------")
        for row in self.board:
            print("| ", end="")
            for cell in row:
                print(cell + " | ", end="")
            print()
            print("--------------------")

    def place_mark(self, row, col, mark):
        if 0 <= row <= 2 and 0 <= col <= 2:
            if self.board[row][col] == ' ':
                self.board[row][col] = mark
            else:
                print("Position already occupied")
        else:
            print("Invalid Position")

    def check_col_win(self):
        for col in range(3):
            if self.board[0][col] != ' ' and self.board[0][col] == self.board[1][col] == self.board[2][col]:
                return True
        return False

    def check_row_win(self):
        for row in range(3):
            if self.board[row][0] != ' ' and self.board[row][0] == self.board[row][1] == self.board[row][2]:
                return True
        return False

    def check_diag_win(self):
        if (self.board[0][0] != ' ' and self.board[0][0] == self.board[1][1] == self.board[2][2]) or \
           (self.board[0][2] != ' ' and self.board[0][2] == self.board[1][1] == self.board[2][0]):
            return True
        return False

    def check_draw(self):
        for row in self.board:
            for cell in row:
                if cell == ' ':
                    return False
        return True

class Player:
    def __init__(self, name, mark, game):
        self.name = name
        self.mark = mark
        self.game = game

    def is_valid_move(self, row, col):
        return 0 <= row <= 2 and 0 <= col <= 2 and self.game.board[row][col] == ' '

class HumanPlayer(Player):
    def make_move(self):
        while True:
            try:
                row, col = map(int, input("Enter the row and col: ").split())
                if self.is_valid_move(row, col):
                    self.game.place_mark(row, col, self.mark)
                    break
                else:
                    print("Invalid move. Try again.")
            except ValueError:
                print("Invalid input. Enter row and column as integers separated by space.")

class AIPlayer(Player):
    def make_move(self):
        while True:
            row, col = random.randint(0, 2), random.randint(0, 2)
            if self.is_valid_move(row, col):
                self.game.place_mark(row, col, self.mark)
                break

if __name__ == "__main__":
    game = TicTacToe()
    p1 = HumanPlayer("Hema", 'X', game)
    p2 = AIPlayer("AI", 'O', game)
    current_player = p1

    while True:
        print(f"{current_player.name}'s turn")
        current_player.make_move()
        game.disp_board()
        if game.check_col_win() or game.check_row_win() or game.check_diag_win():
            print(f"{current_player.name} has won!")
            break
        elif game.check_draw():
            print("Game is a draw!")
            break
        else:
            current_player = p1 if current_player == p2 else p2